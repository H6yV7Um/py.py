{
  "name": "snappyjs",
  "version": "0.5.0",
  "description": "JavaScript implementation of Google's Snappy compression library",
  "repository": {
    "type": "git",
    "url": "git://github.com/zhipeng-jia/snappyjs"
  },
  "main": "index.js",
  "scripts": {
    "test": "standard && tap test.js"
  },
  "author": {
    "name": "Zhipeng Jia"
  },
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {
    "benchmark": "~2.1.0",
    "bluebird": "~3.2.2",
    "browserify": "~13.0.0",
    "licensify": "~2.1.0",
    "microtime": "~2.0.0",
    "request-promise": "~2.0.0",
    "snappy": "~4.1.1",
    "standard": "~6.0.4",
    "tap": "~5.1.1",
    "uglifyify": "~3.0.1"
  },
  "keywords": [
    "snappy"
  ],
  "standard": {
    "ignore": [
      "/dist/snappyjs.js",
      "/dist/snappyjs.min.js"
    ],
    "globals": [
      "FileReader",
      "Benchmark",
      "SnappyJS"
    ]
  },
  "readme": "# SnappyJS [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/) [![Travis CI status](https://travis-ci.org/zhipeng-jia/snappyjs.svg?branch=master)](https://travis-ci.org/zhipeng-jia/snappyjs)\nA pure JavaScript implementation of Google's [Snappy](https://github.com/google/snappy) compression library.\n\nThis implementation is reasonably fast (see benchmark below). It takes advantage of `ArrayBuffer`.\n\n## Install\n\nIf using with Node.js,\n~~~\nnpm install snappyjs\n~~~\n\nIf using with Bower,\n~~~\nbower install snappyjs\n~~~\n\n## Usage\n\nSnappyJS works with Node.js 0.10 or later.\n~~~javascript\nvar SnappyJS = require('snappyjs')\nvar buffer = new ArrayBuffer(100)\n// fill data in buffer\nvar compressed = SnappyJS.compress(buffer)\nvar uncompressed = SnappyJS.uncompress(compressed)\n~~~\n\nYou can also use SnappyJS in browser. Adding `dist/snappyjs.js` or `dist/snappyjs.min.js` will introduce `SnappyJS` in the global scope.\nSnappyJS relies on `ArrayBuffer`. All major browsers support it now ([http://caniuse.com/#feat=typedarrays](http://caniuse.com/#feat=typedarrays)). Also, as I tested, SnappyJS has high performance on latest version of Google Chrome, Safari, Firefox, and Microsoft Edge.\n\n## API\n\n### SnappyJS.compress(input)\n\nCompress `input`, which must be type of `ArrayBuffer`, `Buffer`, or `Uint8Array`.\nCompressed byte stream is returned, with same type of `input`.\n\n### SnappyJS.uncompress(compressed)\n\nUncompress `compressed`, which must be type of `ArrayBuffer`, `Buffer`, or `Uint8Array`.\nUncompressed byte stream is returned, with same type of `compressed`.\n\n## Benchmark\n\nAlthough JavaScript is dynamic-typing, all major JS engines are highly optimized.\nThus well-crafted JavaScript code can have competitive performance even compared to native C++ code.\n\nI benchmark SnappyJS against `node-snappy` (which is Node.js binding of native implementation).\n\nCommand for benchmark is `node benchmark`. Below is the result running on Node.js v5.5.0.\n\n~~~\nReal text #1 (length 618425, byte length 618425), repeated 100 times:\nnode-snappy#compress x 2.31 ops/sec ±1.47% (10 runs sampled)\nsnappyjs#compress x 0.91 ops/sec ±0.92% (7 runs sampled)\nnode-snappy#uncompress x 7.22 ops/sec ±4.07% (22 runs sampled)\nsnappyjs#uncompress x 2.45 ops/sec ±1.53% (11 runs sampled)\n\nReal text #2 (length 3844590, byte length 3844591), repeated 10 times:\nnode-snappy#compress x 7.68 ops/sec ±2.78% (23 runs sampled)\nsnappyjs#compress x 3.56 ops/sec ±1.44% (13 runs sampled)\nnode-snappy#uncompress x 17.94 ops/sec ±4.71% (33 runs sampled)\nsnappyjs#uncompress x 7.24 ops/sec ±2.57% (22 runs sampled)\n\nRandom string (length 1000000, byte length 1500098), repeated 50 times:\nnode-snappy#compress x 6.69 ops/sec ±5.23% (21 runs sampled)\nsnappyjs#compress x 2.39 ops/sec ±2.54% (10 runs sampled)\nnode-snappy#uncompress x 14.94 ops/sec ±6.90% (40 runs sampled)\nsnappyjs#uncompress x 5.92 ops/sec ±4.28% (19 runs sampled)\n\nRandom string (length 100, byte length 147), repeated 100000 times:\nnode-snappy#compress x 4.17 ops/sec ±2.96% (15 runs sampled)\nsnappyjs#compress x 5.45 ops/sec ±1.51% (18 runs sampled)\nnode-snappy#uncompress x 4.39 ops/sec ±3.83% (15 runs sampled)\nsnappyjs#uncompress x 14.01 ops/sec ±2.06% (38 runs sampled)\n~~~\n\nFrom the result, we see that SnappyJS has 35%~45% performance of native implementation.\nIf input size is small, SnappyJS may have better performance than `node-snappy`.\nIt is because calling native function in JS is much more expensive than calling JS function.\n\n## License\n\nMIT License\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zhipeng-jia/snappyjs/issues"
  },
  "homepage": "https://github.com/zhipeng-jia/snappyjs",
  "_id": "snappyjs@0.5.0",
  "_shasum": "2600e75a50f0799c79b055c3df1b7f7008045838",
  "_from": "snappyjs@",
  "_resolved": "http://registry.cnpmjs.org/snappyjs/download/snappyjs-0.5.0.tgz"
}
